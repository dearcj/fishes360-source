// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from data.proto</summary>
public static partial class DataReflection {

  #region Descriptor
  /// <summary>File descriptor for data.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpkYXRhLnByb3RvIhkKCUNvbXBvbmVudBIMCgRkYXRhGAEgASgCImQKClNr",
          "aWxsc0luZm8SDwoHbGFzdFVzZRgBIAEoBRIPCgdza2lsbElkGAIgASgFEhQK",
          "DHNraWxsVXBncmFkZRgDIAEoBRIQCghjb29sZG93bhgEIAEoBRIMCgRkZXNj",
          "GAUgASgJIiEKBEl0ZW0SCgoCaWQYAiABKA0SDQoFcHJpY2UYASABKA0iGwoD",
          "SW52EhQKBWl0ZW1zGAEgAygLMgUuSXRlbSJlCgxDdXN0b21PYmplY3QSJQoN",
          "bmV0d29ya09iamVjdBgBIAEoCzIOLk5ldHdvcmtPYmplY3QSDgoGcGFyYW0x",
          "GAIgASgFEg4KBnBhcmFtMhgDIAEoBRIOCgZwYXJhbTMYBCABKAUiLQoGUmVz",
          "aXN0EhQKDGRhbWFnZVR5cGVJZBgBIAEoDRINCgV2YWx1ZRgCIAEoBSJWCglD",
          "aGFyU3RhdHMSDQoFbWF4aHAYASABKA0SCgoCaHAYAiABKA0SHwoKYWRkaXRp",
          "b25hbBgDIAEoCzILLkFkZGl0aW9uYWwSDQoFYnVmZnMYBCADKA0iUQoKQWRk",
          "aXRpb25hbBIOCgZjb3Jwc2UYASABKAgSEwoLZG9kZ2VjaGFuY2UYAiABKA0S",
          "DwoHcmVzaXN0cxgDIAMoBRINCgVhcm1vchgEIAEoDSLBAgoMUGxheWVyT2Jq",
          "ZWN0EiEKC3NvY2lhbFN0YXRzGAUgASgLMgwuU29jaWFsU3RhdHMSNAoOcGxh",
          "eWVyUmVsYXRpdmUYASABKAsyHC5QbGF5ZXJPYmplY3QuUGxheWVyUmVsYXRp",
          "dmUSJQoNbmV0d29ya09iamVjdBgCIAEoCzIOLk5ldHdvcmtPYmplY3QSHQoJ",
          "Y2hhclN0YXRzGAMgASgLMgouQ2hhclN0YXRzEhcKBnNraWxscxgEIAEoCzIH",
          "LlNraWxscxp5Cg5QbGF5ZXJSZWxhdGl2ZRIRCgltYXhlbmVyZ3kYASABKA0S",
          "DgoGZW5lcmd5GAIgASgFEgoKAnhwGAMgASgNEg0KBWxldmVsGAQgASgNEhAK",
          "CGNoYXJUeXBlGAYgASgNEhcKD3NvY2lhbEFyZ3VtZW50cxgFIAEoDSIbCgtT",
          "b2NpYWxTdGF0cxIMCgRuYW1lGAwgASgJIkEKD01vbnN0ZXJSZWxhdGl2ZRIP",
          "CgdlbmVteUlEGAIgASgNEgwKBHdpbGwYCyABKA0SDwoHbWF4d2lsbBgMIAEo",
          "DSIpCgZTa2lsbHMSHwoKc2tpbGxzSW5mbxgDIAMoCzILLlNraWxsc0luZm8i",
          "fgoLRW5lbXlPYmplY3QSKQoPbW9uc3RlclJlbGF0aXZlGAEgASgLMhAuTW9u",
          "c3RlclJlbGF0aXZlEh0KCWNoYXJTdGF0cxgDIAEoCzIKLkNoYXJTdGF0cxIl",
          "Cg1uZXR3b3JrT2JqZWN0GAQgASgLMg4uTmV0d29ya09iamVjdCJICgxTb2Np",
          "YWxEZXNpcmUSEAoIZGVzaXJlSUQYASABKA0SEwoLcmVxdWlyZUl0ZW0YAyAB",
          "KA0SEQoJYXJndW1lbnRzGAIgASgNIkYKEFBsYXllclJlc29sdXRpb24SEAoI",
          "cGxheWVySWQYASABKA0SIAoJYXJndW1lbnRzGAIgAygLMg0uU29jaWFsRGVz",
          "aXJlIu4BCgtTb2NpYWxTY2VuZRIQCghucGNwbGFjZRgEIAEoDRI2CgpyZXNv",
          "bHV0aW9uGAMgASgLMiIuU29jaWFsU2NlbmUuU29jaWFsU2NlbmVSZXNvbHV0",
          "aW9uEg8KB21lc3NhZ2UYASABKAkSHgoHZGVzaXJlcxgCIAMoCzINLlNvY2lh",
          "bERlc2lyZRpkChVTb2NpYWxTY2VuZVJlc29sdXRpb24SJAoJcGxheWVyUmVz",
          "GAIgAygLMhEuUGxheWVyUmVzb2x1dGlvbhIRCglXaW5EZXNpcmUYASABKA0S",
          "EgoKcmVzTWVzc2FnZRgDIAEoCSI4Cg1OZXR3b3JrT2JqZWN0EgoKAklEGAEg",
          "ASgNEgwKBFR5cGUYAiABKA0SDQoFUGxhY2UYAyABKAUicAoMU2VydmVyRWZm",
          "ZWN0Eh8KBFR5cGUYASABKA4yES5TZXJ2ZXJFZmZlY3RUeXBlEg0KBVZhbHVl",
          "GAIgASgFEg0KBVBsYWNlGAMgASgFEhAKCFRhcmdldElEGAYgASgNEg8KB1N1",
          "YlR5cGUYBSABKA0iQAoLUXVldWVNZW1iZXISEAoIbmlja05hbWUYASABKAkS",
          "DQoFcmVhZHkYAiABKAgSEAoIY2hhclR5cGUYAyABKA0iLwoJUXVldWVEYXRh",
          "EiIKDHF1ZXVlTWVtYmVycxgBIAMoCzIMLlF1ZXVlTWVtYmVyIjIKDkNvbm5l",
          "Y3Rpb25EYXRhEhAKCHBsYXllcklEGAIgASgNEg4KBmNvbk1zZxgGIAEoDSI6",
          "CgxMb2NhdGlvbkRhdGESFAoMbG9jYXRpb25GaWxlGAEgASgJEhQKDGxvY2F0",
          "aW9uTmFtZRgCIAEoCSJTCghSb29tRGF0YRIPCgdoYXNEb29yGAIgASgIEhMK",
          "C2ZvcmNlR29Eb29yGAMgASgIEhAKCHJvb21OYW1lGAUgASgJEg8KB3Jvb21O",
          "dW0YBCABKAUiMgoIVG9SZW1vdmUSCgoCSUQYASABKA0SCwoDQ0lEGAIgASgF",
          "Eg0KBU93bmVyGAMgASgNIlEKDExldmVsVXBTY2VuZRIUCgxsZXZlbFBpY2tp",
          "bmcYBCABKA0SDQoFcGVyazEYASABKA0SDQoFcGVyazIYAiABKA0SDQoFcGVy",
          "azMYAyABKA0iQQoJUmVzb3VyY2VzEg0KBW1vbmV5GAEgASgNEhQKDG1vbmV5",
          "Q3VycmVudBgCIAEoDRIPCgdyYXJlUmVzGAMgASgNIskBCg5BY2NvdW50R2Vu",
          "ZXJhbBIdCglyZXNvdXJjZXMYASABKAsyCi5SZXNvdXJjZXMSEwoFc3Rhc2gY",
          "BCABKAsyBC5JbnYSFwoJaW52ZW50b3J5GAUgASgLMgQuSW52EhUKB3dlYXJp",
          "bmcYBiABKAsyBC5JbnYSEwoLbG9vdE93bmVySUQYCiABKA0SEgoEbG9vdBgH",
          "IAEoCzIELkludhIUCgZtYXJrZXQYCSABKAsyBC5JbnYSFAoMYWNoaWV2ZW1l",
          "bnRzGAggAygNIvgDCgpTZXJ2ZXJEYXRhEh0KCXF1ZXVlRGF0YRgBIAEoCzIK",
          "LlF1ZXVlRGF0YRIgCgdjb25EYXRhGAIgASgLMg8uQ29ubmVjdGlvbkRhdGES",
          "JwoOYWNjb3VudEdlbmVyYWwYAyABKAsyDy5BY2NvdW50R2VuZXJhbBIjCgxs",
          "ZXZlbFVwU2NlbmUYBCABKAsyDS5MZXZlbFVwU2NlbmUSIQoLc29jaWFsU2Nl",
          "bmUYBSABKAsyDC5Tb2NpYWxTY2VuZRIjCgxsb2NhdGlvbkRhdGEYDCABKAsy",
          "DS5Mb2NhdGlvbkRhdGESGwoIcm9vbURhdGEYDSABKAsyCS5Sb29tRGF0YRIk",
          "Cg1jdXN0b21PYmplY3RzGAYgAygLMg0uQ3VzdG9tT2JqZWN0Eh0KB2VuZW1p",
          "ZXMYByADKAsyDC5FbmVteU9iamVjdBIeCgdwbGF5ZXJzGAggAygLMg0uUGxh",
          "eWVyT2JqZWN0EhsKCHRvcmVtb3ZlGAkgAygLMgkuVG9SZW1vdmUSJAoNc2Vy",
          "dmVyRWZmZWN0cxgKIAMoCzINLlNlcnZlckVmZmVjdBIcCgdhY3Rpb25zGAsg",
          "AygLMgsuVHVybkFjdGlvbhIwChNzZXJ2ZXJOb3RpZmljYXRpb25zGA4gAygL",
          "MhMuU2VydmVyTm90aWZpY2F0aW9uIjAKElNlcnZlck5vdGlmaWNhdGlvbhIM",
          "CgR0ZXh0GAEgASgJEgwKBHR5cGUYAiABKA0iUwoKVHVybkFjdGlvbhISCgpQ",
          "bGFjZVN0YXJ0GAEgASgFEg0KBUFnZW50GAIgASgNEg8KB1NraWxsSUQYAyAB",
          "KA0SEQoJSXRlbVBsYWNlGAQgASgFIiwKB0NvbW1hbmQSEQoJQ29tbWFuZElk",
          "GAEgASgFEg4KBlBhcmFtcxgCIAMoBSI4CgpDbGllbnREYXRhEg4KBnJvb21J",
          "ZBgCIAEoBRIaCghjb21tYW5kcxgDIAMoCzIILkNvbW1hbmQqIQoQU2VydmVy",
          "RWZmZWN0VHlwZRINCglBTllfVkFMVUUQAGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ServerEffectType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Component), global::Component.Parser, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SkillsInfo), global::SkillsInfo.Parser, new[]{ "LastUse", "SkillId", "SkillUpgrade", "Cooldown", "Desc" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Item), global::Item.Parser, new[]{ "Id", "Price" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Inv), global::Inv.Parser, new[]{ "Items" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CustomObject), global::CustomObject.Parser, new[]{ "NetworkObject", "Param1", "Param2", "Param3" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Resist), global::Resist.Parser, new[]{ "DamageTypeId", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CharStats), global::CharStats.Parser, new[]{ "Maxhp", "Hp", "Additional", "Buffs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Additional), global::Additional.Parser, new[]{ "Corpse", "Dodgechance", "Resists", "Armor" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerObject), global::PlayerObject.Parser, new[]{ "SocialStats", "PlayerRelative", "NetworkObject", "CharStats", "Skills" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::PlayerObject.Types.PlayerRelative), global::PlayerObject.Types.PlayerRelative.Parser, new[]{ "Maxenergy", "Energy", "Xp", "Level", "CharType", "SocialArguments" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::SocialStats), global::SocialStats.Parser, new[]{ "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonsterRelative), global::MonsterRelative.Parser, new[]{ "EnemyID", "Will", "Maxwill" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Skills), global::Skills.Parser, new[]{ "SkillsInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnemyObject), global::EnemyObject.Parser, new[]{ "MonsterRelative", "CharStats", "NetworkObject" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SocialDesire), global::SocialDesire.Parser, new[]{ "DesireID", "RequireItem", "Arguments" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerResolution), global::PlayerResolution.Parser, new[]{ "PlayerId", "Arguments" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SocialScene), global::SocialScene.Parser, new[]{ "Npcplace", "Resolution", "Message", "Desires" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SocialScene.Types.SocialSceneResolution), global::SocialScene.Types.SocialSceneResolution.Parser, new[]{ "PlayerRes", "WinDesire", "ResMessage" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::NetworkObject), global::NetworkObject.Parser, new[]{ "ID", "Type", "Place" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerEffect), global::ServerEffect.Parser, new[]{ "Type", "Value", "Place", "TargetID", "SubType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QueueMember), global::QueueMember.Parser, new[]{ "NickName", "Ready", "CharType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QueueData), global::QueueData.Parser, new[]{ "QueueMembers" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ConnectionData), global::ConnectionData.Parser, new[]{ "PlayerID", "ConMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LocationData), global::LocationData.Parser, new[]{ "LocationFile", "LocationName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomData), global::RoomData.Parser, new[]{ "HasDoor", "ForceGoDoor", "RoomName", "RoomNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ToRemove), global::ToRemove.Parser, new[]{ "ID", "CID", "Owner" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LevelUpScene), global::LevelUpScene.Parser, new[]{ "LevelPicking", "Perk1", "Perk2", "Perk3" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Resources), global::Resources.Parser, new[]{ "Money", "MoneyCurrent", "RareRes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountGeneral), global::AccountGeneral.Parser, new[]{ "Resources", "Stash", "Inventory", "Wearing", "LootOwnerID", "Loot", "Market", "Achievements" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerData), global::ServerData.Parser, new[]{ "QueueData", "ConData", "AccountGeneral", "LevelUpScene", "SocialScene", "LocationData", "RoomData", "CustomObjects", "Enemies", "Players", "Toremove", "ServerEffects", "Actions", "ServerNotifications" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerNotification), global::ServerNotification.Parser, new[]{ "Text", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TurnAction), global::TurnAction.Parser, new[]{ "PlaceStart", "Agent", "SkillID", "ItemPlace" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Command), global::Command.Parser, new[]{ "CommandId", "Params" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientData), global::ClientData.Parser, new[]{ "RoomId", "Commands" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum ServerEffectType {
  [pbr::OriginalName("ANY_VALUE")] AnyValue = 0,
}

#endregion

#region Messages
public sealed partial class Component : pb::IMessage<Component> {
  private static readonly pb::MessageParser<Component> _parser = new pb::MessageParser<Component>(() => new Component());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Component> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Component() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Component(Component other) : this() {
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Component Clone() {
    return new Component(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private float data_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Data {
    get { return data_; }
    set {
      data_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Component);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Component other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data != 0F) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Component other) {
    if (other == null) {
      return;
    }
    if (other.Data != 0F) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          Data = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class SkillsInfo : pb::IMessage<SkillsInfo> {
  private static readonly pb::MessageParser<SkillsInfo> _parser = new pb::MessageParser<SkillsInfo>(() => new SkillsInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SkillsInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SkillsInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SkillsInfo(SkillsInfo other) : this() {
    lastUse_ = other.lastUse_;
    skillId_ = other.skillId_;
    skillUpgrade_ = other.skillUpgrade_;
    cooldown_ = other.cooldown_;
    desc_ = other.desc_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SkillsInfo Clone() {
    return new SkillsInfo(this);
  }

  /// <summary>Field number for the "lastUse" field.</summary>
  public const int LastUseFieldNumber = 1;
  private int lastUse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastUse {
    get { return lastUse_; }
    set {
      lastUse_ = value;
    }
  }

  /// <summary>Field number for the "skillId" field.</summary>
  public const int SkillIdFieldNumber = 2;
  private int skillId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillId {
    get { return skillId_; }
    set {
      skillId_ = value;
    }
  }

  /// <summary>Field number for the "skillUpgrade" field.</summary>
  public const int SkillUpgradeFieldNumber = 3;
  private int skillUpgrade_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillUpgrade {
    get { return skillUpgrade_; }
    set {
      skillUpgrade_ = value;
    }
  }

  /// <summary>Field number for the "cooldown" field.</summary>
  public const int CooldownFieldNumber = 4;
  private int cooldown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cooldown {
    get { return cooldown_; }
    set {
      cooldown_ = value;
    }
  }

  /// <summary>Field number for the "desc" field.</summary>
  public const int DescFieldNumber = 5;
  private string desc_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Desc {
    get { return desc_; }
    set {
      desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SkillsInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SkillsInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LastUse != other.LastUse) return false;
    if (SkillId != other.SkillId) return false;
    if (SkillUpgrade != other.SkillUpgrade) return false;
    if (Cooldown != other.Cooldown) return false;
    if (Desc != other.Desc) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LastUse != 0) hash ^= LastUse.GetHashCode();
    if (SkillId != 0) hash ^= SkillId.GetHashCode();
    if (SkillUpgrade != 0) hash ^= SkillUpgrade.GetHashCode();
    if (Cooldown != 0) hash ^= Cooldown.GetHashCode();
    if (Desc.Length != 0) hash ^= Desc.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LastUse != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(LastUse);
    }
    if (SkillId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SkillId);
    }
    if (SkillUpgrade != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SkillUpgrade);
    }
    if (Cooldown != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Cooldown);
    }
    if (Desc.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Desc);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LastUse != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastUse);
    }
    if (SkillId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
    }
    if (SkillUpgrade != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillUpgrade);
    }
    if (Cooldown != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooldown);
    }
    if (Desc.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SkillsInfo other) {
    if (other == null) {
      return;
    }
    if (other.LastUse != 0) {
      LastUse = other.LastUse;
    }
    if (other.SkillId != 0) {
      SkillId = other.SkillId;
    }
    if (other.SkillUpgrade != 0) {
      SkillUpgrade = other.SkillUpgrade;
    }
    if (other.Cooldown != 0) {
      Cooldown = other.Cooldown;
    }
    if (other.Desc.Length != 0) {
      Desc = other.Desc;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LastUse = input.ReadInt32();
          break;
        }
        case 16: {
          SkillId = input.ReadInt32();
          break;
        }
        case 24: {
          SkillUpgrade = input.ReadInt32();
          break;
        }
        case 32: {
          Cooldown = input.ReadInt32();
          break;
        }
        case 42: {
          Desc = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Item : pb::IMessage<Item> {
  private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Item> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Item() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Item(Item other) : this() {
    id_ = other.id_;
    price_ = other.price_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Item Clone() {
    return new Item(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private uint id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "price" field.</summary>
  public const int PriceFieldNumber = 1;
  private uint price_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Price {
    get { return price_; }
    set {
      price_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Item);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Item other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Price != other.Price) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Price != 0) hash ^= Price.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Price != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Price);
    }
    if (Id != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
    }
    if (Price != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Item other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Price != 0) {
      Price = other.Price;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Price = input.ReadUInt32();
          break;
        }
        case 16: {
          Id = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Inv : pb::IMessage<Inv> {
  private static readonly pb::MessageParser<Inv> _parser = new pb::MessageParser<Inv>(() => new Inv());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Inv> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Inv() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Inv(Inv other) : this() {
    items_ = other.items_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Inv Clone() {
    return new Inv(this);
  }

  /// <summary>Field number for the "items" field.</summary>
  public const int ItemsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Item> _repeated_items_codec
      = pb::FieldCodec.ForMessage(10, global::Item.Parser);
  private readonly pbc::RepeatedField<global::Item> items_ = new pbc::RepeatedField<global::Item>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Item> Items {
    get { return items_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Inv);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Inv other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!items_.Equals(other.items_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= items_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    items_.WriteTo(output, _repeated_items_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += items_.CalculateSize(_repeated_items_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Inv other) {
    if (other == null) {
      return;
    }
    items_.Add(other.items_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          items_.AddEntriesFrom(input, _repeated_items_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CustomObject : pb::IMessage<CustomObject> {
  private static readonly pb::MessageParser<CustomObject> _parser = new pb::MessageParser<CustomObject>(() => new CustomObject());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CustomObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CustomObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CustomObject(CustomObject other) : this() {
    NetworkObject = other.networkObject_ != null ? other.NetworkObject.Clone() : null;
    param1_ = other.param1_;
    param2_ = other.param2_;
    param3_ = other.param3_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CustomObject Clone() {
    return new CustomObject(this);
  }

  /// <summary>Field number for the "networkObject" field.</summary>
  public const int NetworkObjectFieldNumber = 1;
  private global::NetworkObject networkObject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NetworkObject NetworkObject {
    get { return networkObject_; }
    set {
      networkObject_ = value;
    }
  }

  /// <summary>Field number for the "param1" field.</summary>
  public const int Param1FieldNumber = 2;
  private int param1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Param1 {
    get { return param1_; }
    set {
      param1_ = value;
    }
  }

  /// <summary>Field number for the "param2" field.</summary>
  public const int Param2FieldNumber = 3;
  private int param2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Param2 {
    get { return param2_; }
    set {
      param2_ = value;
    }
  }

  /// <summary>Field number for the "param3" field.</summary>
  public const int Param3FieldNumber = 4;
  private int param3_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Param3 {
    get { return param3_; }
    set {
      param3_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CustomObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CustomObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NetworkObject, other.NetworkObject)) return false;
    if (Param1 != other.Param1) return false;
    if (Param2 != other.Param2) return false;
    if (Param3 != other.Param3) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (networkObject_ != null) hash ^= NetworkObject.GetHashCode();
    if (Param1 != 0) hash ^= Param1.GetHashCode();
    if (Param2 != 0) hash ^= Param2.GetHashCode();
    if (Param3 != 0) hash ^= Param3.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (networkObject_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NetworkObject);
    }
    if (Param1 != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Param1);
    }
    if (Param2 != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Param2);
    }
    if (Param3 != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Param3);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (networkObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkObject);
    }
    if (Param1 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param1);
    }
    if (Param2 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param2);
    }
    if (Param3 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param3);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CustomObject other) {
    if (other == null) {
      return;
    }
    if (other.networkObject_ != null) {
      if (networkObject_ == null) {
        networkObject_ = new global::NetworkObject();
      }
      NetworkObject.MergeFrom(other.NetworkObject);
    }
    if (other.Param1 != 0) {
      Param1 = other.Param1;
    }
    if (other.Param2 != 0) {
      Param2 = other.Param2;
    }
    if (other.Param3 != 0) {
      Param3 = other.Param3;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (networkObject_ == null) {
            networkObject_ = new global::NetworkObject();
          }
          input.ReadMessage(networkObject_);
          break;
        }
        case 16: {
          Param1 = input.ReadInt32();
          break;
        }
        case 24: {
          Param2 = input.ReadInt32();
          break;
        }
        case 32: {
          Param3 = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Resist : pb::IMessage<Resist> {
  private static readonly pb::MessageParser<Resist> _parser = new pb::MessageParser<Resist>(() => new Resist());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Resist> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Resist() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Resist(Resist other) : this() {
    damageTypeId_ = other.damageTypeId_;
    value_ = other.value_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Resist Clone() {
    return new Resist(this);
  }

  /// <summary>Field number for the "damageTypeId" field.</summary>
  public const int DamageTypeIdFieldNumber = 1;
  private uint damageTypeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DamageTypeId {
    get { return damageTypeId_; }
    set {
      damageTypeId_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private int value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Resist);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Resist other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DamageTypeId != other.DamageTypeId) return false;
    if (Value != other.Value) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DamageTypeId != 0) hash ^= DamageTypeId.GetHashCode();
    if (Value != 0) hash ^= Value.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DamageTypeId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(DamageTypeId);
    }
    if (Value != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Value);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DamageTypeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageTypeId);
    }
    if (Value != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Resist other) {
    if (other == null) {
      return;
    }
    if (other.DamageTypeId != 0) {
      DamageTypeId = other.DamageTypeId;
    }
    if (other.Value != 0) {
      Value = other.Value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DamageTypeId = input.ReadUInt32();
          break;
        }
        case 16: {
          Value = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CharStats : pb::IMessage<CharStats> {
  private static readonly pb::MessageParser<CharStats> _parser = new pb::MessageParser<CharStats>(() => new CharStats());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CharStats> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharStats() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharStats(CharStats other) : this() {
    maxhp_ = other.maxhp_;
    hp_ = other.hp_;
    Additional = other.additional_ != null ? other.Additional.Clone() : null;
    buffs_ = other.buffs_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharStats Clone() {
    return new CharStats(this);
  }

  /// <summary>Field number for the "maxhp" field.</summary>
  public const int MaxhpFieldNumber = 1;
  private uint maxhp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Maxhp {
    get { return maxhp_; }
    set {
      maxhp_ = value;
    }
  }

  /// <summary>Field number for the "hp" field.</summary>
  public const int HpFieldNumber = 2;
  private uint hp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Hp {
    get { return hp_; }
    set {
      hp_ = value;
    }
  }

  /// <summary>Field number for the "additional" field.</summary>
  public const int AdditionalFieldNumber = 3;
  private global::Additional additional_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Additional Additional {
    get { return additional_; }
    set {
      additional_ = value;
    }
  }

  /// <summary>Field number for the "buffs" field.</summary>
  public const int BuffsFieldNumber = 4;
  private static readonly pb::FieldCodec<uint> _repeated_buffs_codec
      = pb::FieldCodec.ForUInt32(34);
  private readonly pbc::RepeatedField<uint> buffs_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Buffs {
    get { return buffs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CharStats);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CharStats other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Maxhp != other.Maxhp) return false;
    if (Hp != other.Hp) return false;
    if (!object.Equals(Additional, other.Additional)) return false;
    if(!buffs_.Equals(other.buffs_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Maxhp != 0) hash ^= Maxhp.GetHashCode();
    if (Hp != 0) hash ^= Hp.GetHashCode();
    if (additional_ != null) hash ^= Additional.GetHashCode();
    hash ^= buffs_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Maxhp != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Maxhp);
    }
    if (Hp != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Hp);
    }
    if (additional_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Additional);
    }
    buffs_.WriteTo(output, _repeated_buffs_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Maxhp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxhp);
    }
    if (Hp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hp);
    }
    if (additional_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Additional);
    }
    size += buffs_.CalculateSize(_repeated_buffs_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CharStats other) {
    if (other == null) {
      return;
    }
    if (other.Maxhp != 0) {
      Maxhp = other.Maxhp;
    }
    if (other.Hp != 0) {
      Hp = other.Hp;
    }
    if (other.additional_ != null) {
      if (additional_ == null) {
        additional_ = new global::Additional();
      }
      Additional.MergeFrom(other.Additional);
    }
    buffs_.Add(other.buffs_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Maxhp = input.ReadUInt32();
          break;
        }
        case 16: {
          Hp = input.ReadUInt32();
          break;
        }
        case 26: {
          if (additional_ == null) {
            additional_ = new global::Additional();
          }
          input.ReadMessage(additional_);
          break;
        }
        case 34:
        case 32: {
          buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Additional : pb::IMessage<Additional> {
  private static readonly pb::MessageParser<Additional> _parser = new pb::MessageParser<Additional>(() => new Additional());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Additional> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Additional() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Additional(Additional other) : this() {
    corpse_ = other.corpse_;
    dodgechance_ = other.dodgechance_;
    resists_ = other.resists_.Clone();
    armor_ = other.armor_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Additional Clone() {
    return new Additional(this);
  }

  /// <summary>Field number for the "corpse" field.</summary>
  public const int CorpseFieldNumber = 1;
  private bool corpse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Corpse {
    get { return corpse_; }
    set {
      corpse_ = value;
    }
  }

  /// <summary>Field number for the "dodgechance" field.</summary>
  public const int DodgechanceFieldNumber = 2;
  private uint dodgechance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Dodgechance {
    get { return dodgechance_; }
    set {
      dodgechance_ = value;
    }
  }

  /// <summary>Field number for the "resists" field.</summary>
  public const int ResistsFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_resists_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> resists_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Resists {
    get { return resists_; }
  }

  /// <summary>Field number for the "armor" field.</summary>
  public const int ArmorFieldNumber = 4;
  private uint armor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Armor {
    get { return armor_; }
    set {
      armor_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Additional);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Additional other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Corpse != other.Corpse) return false;
    if (Dodgechance != other.Dodgechance) return false;
    if(!resists_.Equals(other.resists_)) return false;
    if (Armor != other.Armor) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Corpse != false) hash ^= Corpse.GetHashCode();
    if (Dodgechance != 0) hash ^= Dodgechance.GetHashCode();
    hash ^= resists_.GetHashCode();
    if (Armor != 0) hash ^= Armor.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Corpse != false) {
      output.WriteRawTag(8);
      output.WriteBool(Corpse);
    }
    if (Dodgechance != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Dodgechance);
    }
    resists_.WriteTo(output, _repeated_resists_codec);
    if (Armor != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Armor);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Corpse != false) {
      size += 1 + 1;
    }
    if (Dodgechance != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dodgechance);
    }
    size += resists_.CalculateSize(_repeated_resists_codec);
    if (Armor != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Armor);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Additional other) {
    if (other == null) {
      return;
    }
    if (other.Corpse != false) {
      Corpse = other.Corpse;
    }
    if (other.Dodgechance != 0) {
      Dodgechance = other.Dodgechance;
    }
    resists_.Add(other.resists_);
    if (other.Armor != 0) {
      Armor = other.Armor;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Corpse = input.ReadBool();
          break;
        }
        case 16: {
          Dodgechance = input.ReadUInt32();
          break;
        }
        case 26:
        case 24: {
          resists_.AddEntriesFrom(input, _repeated_resists_codec);
          break;
        }
        case 32: {
          Armor = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerObject : pb::IMessage<PlayerObject> {
  private static readonly pb::MessageParser<PlayerObject> _parser = new pb::MessageParser<PlayerObject>(() => new PlayerObject());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerObject(PlayerObject other) : this() {
    SocialStats = other.socialStats_ != null ? other.SocialStats.Clone() : null;
    PlayerRelative = other.playerRelative_ != null ? other.PlayerRelative.Clone() : null;
    NetworkObject = other.networkObject_ != null ? other.NetworkObject.Clone() : null;
    CharStats = other.charStats_ != null ? other.CharStats.Clone() : null;
    Skills = other.skills_ != null ? other.Skills.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerObject Clone() {
    return new PlayerObject(this);
  }

  /// <summary>Field number for the "socialStats" field.</summary>
  public const int SocialStatsFieldNumber = 5;
  private global::SocialStats socialStats_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SocialStats SocialStats {
    get { return socialStats_; }
    set {
      socialStats_ = value;
    }
  }

  /// <summary>Field number for the "playerRelative" field.</summary>
  public const int PlayerRelativeFieldNumber = 1;
  private global::PlayerObject.Types.PlayerRelative playerRelative_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerObject.Types.PlayerRelative PlayerRelative {
    get { return playerRelative_; }
    set {
      playerRelative_ = value;
    }
  }

  /// <summary>Field number for the "networkObject" field.</summary>
  public const int NetworkObjectFieldNumber = 2;
  private global::NetworkObject networkObject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NetworkObject NetworkObject {
    get { return networkObject_; }
    set {
      networkObject_ = value;
    }
  }

  /// <summary>Field number for the "charStats" field.</summary>
  public const int CharStatsFieldNumber = 3;
  private global::CharStats charStats_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CharStats CharStats {
    get { return charStats_; }
    set {
      charStats_ = value;
    }
  }

  /// <summary>Field number for the "skills" field.</summary>
  public const int SkillsFieldNumber = 4;
  private global::Skills skills_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Skills Skills {
    get { return skills_; }
    set {
      skills_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SocialStats, other.SocialStats)) return false;
    if (!object.Equals(PlayerRelative, other.PlayerRelative)) return false;
    if (!object.Equals(NetworkObject, other.NetworkObject)) return false;
    if (!object.Equals(CharStats, other.CharStats)) return false;
    if (!object.Equals(Skills, other.Skills)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (socialStats_ != null) hash ^= SocialStats.GetHashCode();
    if (playerRelative_ != null) hash ^= PlayerRelative.GetHashCode();
    if (networkObject_ != null) hash ^= NetworkObject.GetHashCode();
    if (charStats_ != null) hash ^= CharStats.GetHashCode();
    if (skills_ != null) hash ^= Skills.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (playerRelative_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PlayerRelative);
    }
    if (networkObject_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(NetworkObject);
    }
    if (charStats_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(CharStats);
    }
    if (skills_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Skills);
    }
    if (socialStats_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(SocialStats);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (socialStats_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocialStats);
    }
    if (playerRelative_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerRelative);
    }
    if (networkObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkObject);
    }
    if (charStats_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharStats);
    }
    if (skills_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Skills);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerObject other) {
    if (other == null) {
      return;
    }
    if (other.socialStats_ != null) {
      if (socialStats_ == null) {
        socialStats_ = new global::SocialStats();
      }
      SocialStats.MergeFrom(other.SocialStats);
    }
    if (other.playerRelative_ != null) {
      if (playerRelative_ == null) {
        playerRelative_ = new global::PlayerObject.Types.PlayerRelative();
      }
      PlayerRelative.MergeFrom(other.PlayerRelative);
    }
    if (other.networkObject_ != null) {
      if (networkObject_ == null) {
        networkObject_ = new global::NetworkObject();
      }
      NetworkObject.MergeFrom(other.NetworkObject);
    }
    if (other.charStats_ != null) {
      if (charStats_ == null) {
        charStats_ = new global::CharStats();
      }
      CharStats.MergeFrom(other.CharStats);
    }
    if (other.skills_ != null) {
      if (skills_ == null) {
        skills_ = new global::Skills();
      }
      Skills.MergeFrom(other.Skills);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (playerRelative_ == null) {
            playerRelative_ = new global::PlayerObject.Types.PlayerRelative();
          }
          input.ReadMessage(playerRelative_);
          break;
        }
        case 18: {
          if (networkObject_ == null) {
            networkObject_ = new global::NetworkObject();
          }
          input.ReadMessage(networkObject_);
          break;
        }
        case 26: {
          if (charStats_ == null) {
            charStats_ = new global::CharStats();
          }
          input.ReadMessage(charStats_);
          break;
        }
        case 34: {
          if (skills_ == null) {
            skills_ = new global::Skills();
          }
          input.ReadMessage(skills_);
          break;
        }
        case 42: {
          if (socialStats_ == null) {
            socialStats_ = new global::SocialStats();
          }
          input.ReadMessage(socialStats_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the PlayerObject message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class PlayerRelative : pb::IMessage<PlayerRelative> {
      private static readonly pb::MessageParser<PlayerRelative> _parser = new pb::MessageParser<PlayerRelative>(() => new PlayerRelative());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<PlayerRelative> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::PlayerObject.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public PlayerRelative() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public PlayerRelative(PlayerRelative other) : this() {
        maxenergy_ = other.maxenergy_;
        energy_ = other.energy_;
        xp_ = other.xp_;
        level_ = other.level_;
        charType_ = other.charType_;
        socialArguments_ = other.socialArguments_;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public PlayerRelative Clone() {
        return new PlayerRelative(this);
      }

      /// <summary>Field number for the "maxenergy" field.</summary>
      public const int MaxenergyFieldNumber = 1;
      private uint maxenergy_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Maxenergy {
        get { return maxenergy_; }
        set {
          maxenergy_ = value;
        }
      }

      /// <summary>Field number for the "energy" field.</summary>
      public const int EnergyFieldNumber = 2;
      private int energy_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Energy {
        get { return energy_; }
        set {
          energy_ = value;
        }
      }

      /// <summary>Field number for the "xp" field.</summary>
      public const int XpFieldNumber = 3;
      private uint xp_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Xp {
        get { return xp_; }
        set {
          xp_ = value;
        }
      }

      /// <summary>Field number for the "level" field.</summary>
      public const int LevelFieldNumber = 4;
      private uint level_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Level {
        get { return level_; }
        set {
          level_ = value;
        }
      }

      /// <summary>Field number for the "charType" field.</summary>
      public const int CharTypeFieldNumber = 6;
      private uint charType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint CharType {
        get { return charType_; }
        set {
          charType_ = value;
        }
      }

      /// <summary>Field number for the "socialArguments" field.</summary>
      public const int SocialArgumentsFieldNumber = 5;
      private uint socialArguments_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint SocialArguments {
        get { return socialArguments_; }
        set {
          socialArguments_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as PlayerRelative);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(PlayerRelative other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Maxenergy != other.Maxenergy) return false;
        if (Energy != other.Energy) return false;
        if (Xp != other.Xp) return false;
        if (Level != other.Level) return false;
        if (CharType != other.CharType) return false;
        if (SocialArguments != other.SocialArguments) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Maxenergy != 0) hash ^= Maxenergy.GetHashCode();
        if (Energy != 0) hash ^= Energy.GetHashCode();
        if (Xp != 0) hash ^= Xp.GetHashCode();
        if (Level != 0) hash ^= Level.GetHashCode();
        if (CharType != 0) hash ^= CharType.GetHashCode();
        if (SocialArguments != 0) hash ^= SocialArguments.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Maxenergy != 0) {
          output.WriteRawTag(8);
          output.WriteUInt32(Maxenergy);
        }
        if (Energy != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(Energy);
        }
        if (Xp != 0) {
          output.WriteRawTag(24);
          output.WriteUInt32(Xp);
        }
        if (Level != 0) {
          output.WriteRawTag(32);
          output.WriteUInt32(Level);
        }
        if (SocialArguments != 0) {
          output.WriteRawTag(40);
          output.WriteUInt32(SocialArguments);
        }
        if (CharType != 0) {
          output.WriteRawTag(48);
          output.WriteUInt32(CharType);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Maxenergy != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxenergy);
        }
        if (Energy != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
        }
        if (Xp != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Xp);
        }
        if (Level != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
        }
        if (CharType != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CharType);
        }
        if (SocialArguments != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SocialArguments);
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(PlayerRelative other) {
        if (other == null) {
          return;
        }
        if (other.Maxenergy != 0) {
          Maxenergy = other.Maxenergy;
        }
        if (other.Energy != 0) {
          Energy = other.Energy;
        }
        if (other.Xp != 0) {
          Xp = other.Xp;
        }
        if (other.Level != 0) {
          Level = other.Level;
        }
        if (other.CharType != 0) {
          CharType = other.CharType;
        }
        if (other.SocialArguments != 0) {
          SocialArguments = other.SocialArguments;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              Maxenergy = input.ReadUInt32();
              break;
            }
            case 16: {
              Energy = input.ReadInt32();
              break;
            }
            case 24: {
              Xp = input.ReadUInt32();
              break;
            }
            case 32: {
              Level = input.ReadUInt32();
              break;
            }
            case 40: {
              SocialArguments = input.ReadUInt32();
              break;
            }
            case 48: {
              CharType = input.ReadUInt32();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class SocialStats : pb::IMessage<SocialStats> {
  private static readonly pb::MessageParser<SocialStats> _parser = new pb::MessageParser<SocialStats>(() => new SocialStats());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SocialStats> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SocialStats() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SocialStats(SocialStats other) : this() {
    name_ = other.name_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SocialStats Clone() {
    return new SocialStats(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 12;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SocialStats);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SocialStats other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Name);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SocialStats other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 98: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class MonsterRelative : pb::IMessage<MonsterRelative> {
  private static readonly pb::MessageParser<MonsterRelative> _parser = new pb::MessageParser<MonsterRelative>(() => new MonsterRelative());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonsterRelative> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonsterRelative() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonsterRelative(MonsterRelative other) : this() {
    enemyID_ = other.enemyID_;
    will_ = other.will_;
    maxwill_ = other.maxwill_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonsterRelative Clone() {
    return new MonsterRelative(this);
  }

  /// <summary>Field number for the "enemyID" field.</summary>
  public const int EnemyIDFieldNumber = 2;
  private uint enemyID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EnemyID {
    get { return enemyID_; }
    set {
      enemyID_ = value;
    }
  }

  /// <summary>Field number for the "will" field.</summary>
  public const int WillFieldNumber = 11;
  private uint will_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Will {
    get { return will_; }
    set {
      will_ = value;
    }
  }

  /// <summary>Field number for the "maxwill" field.</summary>
  public const int MaxwillFieldNumber = 12;
  private uint maxwill_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Maxwill {
    get { return maxwill_; }
    set {
      maxwill_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonsterRelative);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonsterRelative other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EnemyID != other.EnemyID) return false;
    if (Will != other.Will) return false;
    if (Maxwill != other.Maxwill) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EnemyID != 0) hash ^= EnemyID.GetHashCode();
    if (Will != 0) hash ^= Will.GetHashCode();
    if (Maxwill != 0) hash ^= Maxwill.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EnemyID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(EnemyID);
    }
    if (Will != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(Will);
    }
    if (Maxwill != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(Maxwill);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EnemyID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyID);
    }
    if (Will != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Will);
    }
    if (Maxwill != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxwill);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonsterRelative other) {
    if (other == null) {
      return;
    }
    if (other.EnemyID != 0) {
      EnemyID = other.EnemyID;
    }
    if (other.Will != 0) {
      Will = other.Will;
    }
    if (other.Maxwill != 0) {
      Maxwill = other.Maxwill;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 16: {
          EnemyID = input.ReadUInt32();
          break;
        }
        case 88: {
          Will = input.ReadUInt32();
          break;
        }
        case 96: {
          Maxwill = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Skills : pb::IMessage<Skills> {
  private static readonly pb::MessageParser<Skills> _parser = new pb::MessageParser<Skills>(() => new Skills());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Skills> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Skills() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Skills(Skills other) : this() {
    skillsInfo_ = other.skillsInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Skills Clone() {
    return new Skills(this);
  }

  /// <summary>Field number for the "skillsInfo" field.</summary>
  public const int SkillsInfoFieldNumber = 3;
  private static readonly pb::FieldCodec<global::SkillsInfo> _repeated_skillsInfo_codec
      = pb::FieldCodec.ForMessage(26, global::SkillsInfo.Parser);
  private readonly pbc::RepeatedField<global::SkillsInfo> skillsInfo_ = new pbc::RepeatedField<global::SkillsInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SkillsInfo> SkillsInfo {
    get { return skillsInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Skills);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Skills other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!skillsInfo_.Equals(other.skillsInfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= skillsInfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    skillsInfo_.WriteTo(output, _repeated_skillsInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += skillsInfo_.CalculateSize(_repeated_skillsInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Skills other) {
    if (other == null) {
      return;
    }
    skillsInfo_.Add(other.skillsInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 26: {
          skillsInfo_.AddEntriesFrom(input, _repeated_skillsInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class EnemyObject : pb::IMessage<EnemyObject> {
  private static readonly pb::MessageParser<EnemyObject> _parser = new pb::MessageParser<EnemyObject>(() => new EnemyObject());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnemyObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnemyObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnemyObject(EnemyObject other) : this() {
    MonsterRelative = other.monsterRelative_ != null ? other.MonsterRelative.Clone() : null;
    CharStats = other.charStats_ != null ? other.CharStats.Clone() : null;
    NetworkObject = other.networkObject_ != null ? other.NetworkObject.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnemyObject Clone() {
    return new EnemyObject(this);
  }

  /// <summary>Field number for the "monsterRelative" field.</summary>
  public const int MonsterRelativeFieldNumber = 1;
  private global::MonsterRelative monsterRelative_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MonsterRelative MonsterRelative {
    get { return monsterRelative_; }
    set {
      monsterRelative_ = value;
    }
  }

  /// <summary>Field number for the "charStats" field.</summary>
  public const int CharStatsFieldNumber = 3;
  private global::CharStats charStats_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CharStats CharStats {
    get { return charStats_; }
    set {
      charStats_ = value;
    }
  }

  /// <summary>Field number for the "networkObject" field.</summary>
  public const int NetworkObjectFieldNumber = 4;
  private global::NetworkObject networkObject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NetworkObject NetworkObject {
    get { return networkObject_; }
    set {
      networkObject_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnemyObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnemyObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MonsterRelative, other.MonsterRelative)) return false;
    if (!object.Equals(CharStats, other.CharStats)) return false;
    if (!object.Equals(NetworkObject, other.NetworkObject)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (monsterRelative_ != null) hash ^= MonsterRelative.GetHashCode();
    if (charStats_ != null) hash ^= CharStats.GetHashCode();
    if (networkObject_ != null) hash ^= NetworkObject.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (monsterRelative_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(MonsterRelative);
    }
    if (charStats_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(CharStats);
    }
    if (networkObject_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(NetworkObject);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (monsterRelative_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonsterRelative);
    }
    if (charStats_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharStats);
    }
    if (networkObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkObject);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnemyObject other) {
    if (other == null) {
      return;
    }
    if (other.monsterRelative_ != null) {
      if (monsterRelative_ == null) {
        monsterRelative_ = new global::MonsterRelative();
      }
      MonsterRelative.MergeFrom(other.MonsterRelative);
    }
    if (other.charStats_ != null) {
      if (charStats_ == null) {
        charStats_ = new global::CharStats();
      }
      CharStats.MergeFrom(other.CharStats);
    }
    if (other.networkObject_ != null) {
      if (networkObject_ == null) {
        networkObject_ = new global::NetworkObject();
      }
      NetworkObject.MergeFrom(other.NetworkObject);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (monsterRelative_ == null) {
            monsterRelative_ = new global::MonsterRelative();
          }
          input.ReadMessage(monsterRelative_);
          break;
        }
        case 26: {
          if (charStats_ == null) {
            charStats_ = new global::CharStats();
          }
          input.ReadMessage(charStats_);
          break;
        }
        case 34: {
          if (networkObject_ == null) {
            networkObject_ = new global::NetworkObject();
          }
          input.ReadMessage(networkObject_);
          break;
        }
      }
    }
  }

}

public sealed partial class SocialDesire : pb::IMessage<SocialDesire> {
  private static readonly pb::MessageParser<SocialDesire> _parser = new pb::MessageParser<SocialDesire>(() => new SocialDesire());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SocialDesire> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SocialDesire() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SocialDesire(SocialDesire other) : this() {
    desireID_ = other.desireID_;
    requireItem_ = other.requireItem_;
    arguments_ = other.arguments_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SocialDesire Clone() {
    return new SocialDesire(this);
  }

  /// <summary>Field number for the "desireID" field.</summary>
  public const int DesireIDFieldNumber = 1;
  private uint desireID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DesireID {
    get { return desireID_; }
    set {
      desireID_ = value;
    }
  }

  /// <summary>Field number for the "requireItem" field.</summary>
  public const int RequireItemFieldNumber = 3;
  private uint requireItem_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequireItem {
    get { return requireItem_; }
    set {
      requireItem_ = value;
    }
  }

  /// <summary>Field number for the "arguments" field.</summary>
  public const int ArgumentsFieldNumber = 2;
  private uint arguments_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Arguments {
    get { return arguments_; }
    set {
      arguments_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SocialDesire);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SocialDesire other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DesireID != other.DesireID) return false;
    if (RequireItem != other.RequireItem) return false;
    if (Arguments != other.Arguments) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DesireID != 0) hash ^= DesireID.GetHashCode();
    if (RequireItem != 0) hash ^= RequireItem.GetHashCode();
    if (Arguments != 0) hash ^= Arguments.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DesireID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(DesireID);
    }
    if (Arguments != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Arguments);
    }
    if (RequireItem != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(RequireItem);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DesireID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DesireID);
    }
    if (RequireItem != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequireItem);
    }
    if (Arguments != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Arguments);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SocialDesire other) {
    if (other == null) {
      return;
    }
    if (other.DesireID != 0) {
      DesireID = other.DesireID;
    }
    if (other.RequireItem != 0) {
      RequireItem = other.RequireItem;
    }
    if (other.Arguments != 0) {
      Arguments = other.Arguments;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DesireID = input.ReadUInt32();
          break;
        }
        case 16: {
          Arguments = input.ReadUInt32();
          break;
        }
        case 24: {
          RequireItem = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerResolution : pb::IMessage<PlayerResolution> {
  private static readonly pb::MessageParser<PlayerResolution> _parser = new pb::MessageParser<PlayerResolution>(() => new PlayerResolution());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerResolution> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerResolution() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerResolution(PlayerResolution other) : this() {
    playerId_ = other.playerId_;
    arguments_ = other.arguments_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerResolution Clone() {
    return new PlayerResolution(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "arguments" field.</summary>
  public const int ArgumentsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::SocialDesire> _repeated_arguments_codec
      = pb::FieldCodec.ForMessage(18, global::SocialDesire.Parser);
  private readonly pbc::RepeatedField<global::SocialDesire> arguments_ = new pbc::RepeatedField<global::SocialDesire>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SocialDesire> Arguments {
    get { return arguments_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerResolution);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerResolution other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if(!arguments_.Equals(other.arguments_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    hash ^= arguments_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    arguments_.WriteTo(output, _repeated_arguments_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    size += arguments_.CalculateSize(_repeated_arguments_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerResolution other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    arguments_.Add(other.arguments_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SocialScene : pb::IMessage<SocialScene> {
  private static readonly pb::MessageParser<SocialScene> _parser = new pb::MessageParser<SocialScene>(() => new SocialScene());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SocialScene> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SocialScene() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SocialScene(SocialScene other) : this() {
    npcplace_ = other.npcplace_;
    Resolution = other.resolution_ != null ? other.Resolution.Clone() : null;
    message_ = other.message_;
    desires_ = other.desires_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SocialScene Clone() {
    return new SocialScene(this);
  }

  /// <summary>Field number for the "npcplace" field.</summary>
  public const int NpcplaceFieldNumber = 4;
  private uint npcplace_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Npcplace {
    get { return npcplace_; }
    set {
      npcplace_ = value;
    }
  }

  /// <summary>Field number for the "resolution" field.</summary>
  public const int ResolutionFieldNumber = 3;
  private global::SocialScene.Types.SocialSceneResolution resolution_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SocialScene.Types.SocialSceneResolution Resolution {
    get { return resolution_; }
    set {
      resolution_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 1;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "desires" field.</summary>
  public const int DesiresFieldNumber = 2;
  private static readonly pb::FieldCodec<global::SocialDesire> _repeated_desires_codec
      = pb::FieldCodec.ForMessage(18, global::SocialDesire.Parser);
  private readonly pbc::RepeatedField<global::SocialDesire> desires_ = new pbc::RepeatedField<global::SocialDesire>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SocialDesire> Desires {
    get { return desires_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SocialScene);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SocialScene other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Npcplace != other.Npcplace) return false;
    if (!object.Equals(Resolution, other.Resolution)) return false;
    if (Message != other.Message) return false;
    if(!desires_.Equals(other.desires_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Npcplace != 0) hash ^= Npcplace.GetHashCode();
    if (resolution_ != null) hash ^= Resolution.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    hash ^= desires_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Message.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Message);
    }
    desires_.WriteTo(output, _repeated_desires_codec);
    if (resolution_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Resolution);
    }
    if (Npcplace != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Npcplace);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Npcplace != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcplace);
    }
    if (resolution_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resolution);
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    size += desires_.CalculateSize(_repeated_desires_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SocialScene other) {
    if (other == null) {
      return;
    }
    if (other.Npcplace != 0) {
      Npcplace = other.Npcplace;
    }
    if (other.resolution_ != null) {
      if (resolution_ == null) {
        resolution_ = new global::SocialScene.Types.SocialSceneResolution();
      }
      Resolution.MergeFrom(other.Resolution);
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    desires_.Add(other.desires_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Message = input.ReadString();
          break;
        }
        case 18: {
          desires_.AddEntriesFrom(input, _repeated_desires_codec);
          break;
        }
        case 26: {
          if (resolution_ == null) {
            resolution_ = new global::SocialScene.Types.SocialSceneResolution();
          }
          input.ReadMessage(resolution_);
          break;
        }
        case 32: {
          Npcplace = input.ReadUInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the SocialScene message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class SocialSceneResolution : pb::IMessage<SocialSceneResolution> {
      private static readonly pb::MessageParser<SocialSceneResolution> _parser = new pb::MessageParser<SocialSceneResolution>(() => new SocialSceneResolution());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<SocialSceneResolution> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::SocialScene.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public SocialSceneResolution() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public SocialSceneResolution(SocialSceneResolution other) : this() {
        playerRes_ = other.playerRes_.Clone();
        winDesire_ = other.winDesire_;
        resMessage_ = other.resMessage_;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public SocialSceneResolution Clone() {
        return new SocialSceneResolution(this);
      }

      /// <summary>Field number for the "playerRes" field.</summary>
      public const int PlayerResFieldNumber = 2;
      private static readonly pb::FieldCodec<global::PlayerResolution> _repeated_playerRes_codec
          = pb::FieldCodec.ForMessage(18, global::PlayerResolution.Parser);
      private readonly pbc::RepeatedField<global::PlayerResolution> playerRes_ = new pbc::RepeatedField<global::PlayerResolution>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::PlayerResolution> PlayerRes {
        get { return playerRes_; }
      }

      /// <summary>Field number for the "WinDesire" field.</summary>
      public const int WinDesireFieldNumber = 1;
      private uint winDesire_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint WinDesire {
        get { return winDesire_; }
        set {
          winDesire_ = value;
        }
      }

      /// <summary>Field number for the "resMessage" field.</summary>
      public const int ResMessageFieldNumber = 3;
      private string resMessage_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string ResMessage {
        get { return resMessage_; }
        set {
          resMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as SocialSceneResolution);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(SocialSceneResolution other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if(!playerRes_.Equals(other.playerRes_)) return false;
        if (WinDesire != other.WinDesire) return false;
        if (ResMessage != other.ResMessage) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        hash ^= playerRes_.GetHashCode();
        if (WinDesire != 0) hash ^= WinDesire.GetHashCode();
        if (ResMessage.Length != 0) hash ^= ResMessage.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (WinDesire != 0) {
          output.WriteRawTag(8);
          output.WriteUInt32(WinDesire);
        }
        playerRes_.WriteTo(output, _repeated_playerRes_codec);
        if (ResMessage.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(ResMessage);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        size += playerRes_.CalculateSize(_repeated_playerRes_codec);
        if (WinDesire != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinDesire);
        }
        if (ResMessage.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(ResMessage);
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(SocialSceneResolution other) {
        if (other == null) {
          return;
        }
        playerRes_.Add(other.playerRes_);
        if (other.WinDesire != 0) {
          WinDesire = other.WinDesire;
        }
        if (other.ResMessage.Length != 0) {
          ResMessage = other.ResMessage;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              WinDesire = input.ReadUInt32();
              break;
            }
            case 18: {
              playerRes_.AddEntriesFrom(input, _repeated_playerRes_codec);
              break;
            }
            case 26: {
              ResMessage = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class NetworkObject : pb::IMessage<NetworkObject> {
  private static readonly pb::MessageParser<NetworkObject> _parser = new pb::MessageParser<NetworkObject>(() => new NetworkObject());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NetworkObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkObject(NetworkObject other) : this() {
    iD_ = other.iD_;
    type_ = other.type_;
    place_ = other.place_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NetworkObject Clone() {
    return new NetworkObject(this);
  }

  /// <summary>Field number for the "ID" field.</summary>
  public const int IDFieldNumber = 1;
  private uint iD_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ID {
    get { return iD_; }
    set {
      iD_ = value;
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 2;
  private uint type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "Place" field.</summary>
  public const int PlaceFieldNumber = 3;
  private int place_;
  /// <summary>
  ///    int32 Owner = 4;
  ///    repeated float components = 5;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Place {
    get { return place_; }
    set {
      place_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NetworkObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NetworkObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ID != other.ID) return false;
    if (Type != other.Type) return false;
    if (Place != other.Place) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ID != 0) hash ^= ID.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Place != 0) hash ^= Place.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ID);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Type);
    }
    if (Place != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Place);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
    }
    if (Place != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Place);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NetworkObject other) {
    if (other == null) {
      return;
    }
    if (other.ID != 0) {
      ID = other.ID;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Place != 0) {
      Place = other.Place;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ID = input.ReadUInt32();
          break;
        }
        case 16: {
          Type = input.ReadUInt32();
          break;
        }
        case 24: {
          Place = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ServerEffect : pb::IMessage<ServerEffect> {
  private static readonly pb::MessageParser<ServerEffect> _parser = new pb::MessageParser<ServerEffect>(() => new ServerEffect());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerEffect> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerEffect() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerEffect(ServerEffect other) : this() {
    type_ = other.type_;
    value_ = other.value_;
    place_ = other.place_;
    targetID_ = other.targetID_;
    subType_ = other.subType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerEffect Clone() {
    return new ServerEffect(this);
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::ServerEffectType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServerEffectType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "Value" field.</summary>
  public const int ValueFieldNumber = 2;
  private int value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "Place" field.</summary>
  public const int PlaceFieldNumber = 3;
  private int place_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Place {
    get { return place_; }
    set {
      place_ = value;
    }
  }

  /// <summary>Field number for the "TargetID" field.</summary>
  public const int TargetIDFieldNumber = 6;
  private uint targetID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetID {
    get { return targetID_; }
    set {
      targetID_ = value;
    }
  }

  /// <summary>Field number for the "SubType" field.</summary>
  public const int SubTypeFieldNumber = 5;
  private uint subType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SubType {
    get { return subType_; }
    set {
      subType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerEffect);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerEffect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Value != other.Value) return false;
    if (Place != other.Place) return false;
    if (TargetID != other.TargetID) return false;
    if (SubType != other.SubType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Value != 0) hash ^= Value.GetHashCode();
    if (Place != 0) hash ^= Place.GetHashCode();
    if (TargetID != 0) hash ^= TargetID.GetHashCode();
    if (SubType != 0) hash ^= SubType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Value != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Value);
    }
    if (Place != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Place);
    }
    if (SubType != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(SubType);
    }
    if (TargetID != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(TargetID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Value != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
    }
    if (Place != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Place);
    }
    if (TargetID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetID);
    }
    if (SubType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerEffect other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Value != 0) {
      Value = other.Value;
    }
    if (other.Place != 0) {
      Place = other.Place;
    }
    if (other.TargetID != 0) {
      TargetID = other.TargetID;
    }
    if (other.SubType != 0) {
      SubType = other.SubType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::ServerEffectType) input.ReadEnum();
          break;
        }
        case 16: {
          Value = input.ReadInt32();
          break;
        }
        case 24: {
          Place = input.ReadInt32();
          break;
        }
        case 40: {
          SubType = input.ReadUInt32();
          break;
        }
        case 48: {
          TargetID = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class QueueMember : pb::IMessage<QueueMember> {
  private static readonly pb::MessageParser<QueueMember> _parser = new pb::MessageParser<QueueMember>(() => new QueueMember());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QueueMember> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueueMember() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueueMember(QueueMember other) : this() {
    nickName_ = other.nickName_;
    ready_ = other.ready_;
    charType_ = other.charType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueueMember Clone() {
    return new QueueMember(this);
  }

  /// <summary>Field number for the "nickName" field.</summary>
  public const int NickNameFieldNumber = 1;
  private string nickName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NickName {
    get { return nickName_; }
    set {
      nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ready" field.</summary>
  public const int ReadyFieldNumber = 2;
  private bool ready_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Ready {
    get { return ready_; }
    set {
      ready_ = value;
    }
  }

  /// <summary>Field number for the "charType" field.</summary>
  public const int CharTypeFieldNumber = 3;
  private uint charType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CharType {
    get { return charType_; }
    set {
      charType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QueueMember);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QueueMember other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NickName != other.NickName) return false;
    if (Ready != other.Ready) return false;
    if (CharType != other.CharType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NickName.Length != 0) hash ^= NickName.GetHashCode();
    if (Ready != false) hash ^= Ready.GetHashCode();
    if (CharType != 0) hash ^= CharType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NickName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(NickName);
    }
    if (Ready != false) {
      output.WriteRawTag(16);
      output.WriteBool(Ready);
    }
    if (CharType != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CharType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NickName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
    }
    if (Ready != false) {
      size += 1 + 1;
    }
    if (CharType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CharType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QueueMember other) {
    if (other == null) {
      return;
    }
    if (other.NickName.Length != 0) {
      NickName = other.NickName;
    }
    if (other.Ready != false) {
      Ready = other.Ready;
    }
    if (other.CharType != 0) {
      CharType = other.CharType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          NickName = input.ReadString();
          break;
        }
        case 16: {
          Ready = input.ReadBool();
          break;
        }
        case 24: {
          CharType = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class QueueData : pb::IMessage<QueueData> {
  private static readonly pb::MessageParser<QueueData> _parser = new pb::MessageParser<QueueData>(() => new QueueData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QueueData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueueData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueueData(QueueData other) : this() {
    queueMembers_ = other.queueMembers_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueueData Clone() {
    return new QueueData(this);
  }

  /// <summary>Field number for the "queueMembers" field.</summary>
  public const int QueueMembersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::QueueMember> _repeated_queueMembers_codec
      = pb::FieldCodec.ForMessage(10, global::QueueMember.Parser);
  private readonly pbc::RepeatedField<global::QueueMember> queueMembers_ = new pbc::RepeatedField<global::QueueMember>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::QueueMember> QueueMembers {
    get { return queueMembers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QueueData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QueueData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!queueMembers_.Equals(other.queueMembers_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= queueMembers_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    queueMembers_.WriteTo(output, _repeated_queueMembers_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += queueMembers_.CalculateSize(_repeated_queueMembers_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QueueData other) {
    if (other == null) {
      return;
    }
    queueMembers_.Add(other.queueMembers_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          queueMembers_.AddEntriesFrom(input, _repeated_queueMembers_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ConnectionData : pb::IMessage<ConnectionData> {
  private static readonly pb::MessageParser<ConnectionData> _parser = new pb::MessageParser<ConnectionData>(() => new ConnectionData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ConnectionData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectionData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectionData(ConnectionData other) : this() {
    playerID_ = other.playerID_;
    conMsg_ = other.conMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectionData Clone() {
    return new ConnectionData(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 2;
  private uint playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "conMsg" field.</summary>
  public const int ConMsgFieldNumber = 6;
  private uint conMsg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ConMsg {
    get { return conMsg_; }
    set {
      conMsg_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ConnectionData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ConnectionData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (ConMsg != other.ConMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (ConMsg != 0) hash ^= ConMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerID);
    }
    if (ConMsg != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(ConMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerID);
    }
    if (ConMsg != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ConnectionData other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.ConMsg != 0) {
      ConMsg = other.ConMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 16: {
          PlayerID = input.ReadUInt32();
          break;
        }
        case 48: {
          ConMsg = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LocationData : pb::IMessage<LocationData> {
  private static readonly pb::MessageParser<LocationData> _parser = new pb::MessageParser<LocationData>(() => new LocationData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LocationData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocationData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocationData(LocationData other) : this() {
    locationFile_ = other.locationFile_;
    locationName_ = other.locationName_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocationData Clone() {
    return new LocationData(this);
  }

  /// <summary>Field number for the "locationFile" field.</summary>
  public const int LocationFileFieldNumber = 1;
  private string locationFile_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LocationFile {
    get { return locationFile_; }
    set {
      locationFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "locationName" field.</summary>
  public const int LocationNameFieldNumber = 2;
  private string locationName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LocationName {
    get { return locationName_; }
    set {
      locationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LocationData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LocationData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LocationFile != other.LocationFile) return false;
    if (LocationName != other.LocationName) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LocationFile.Length != 0) hash ^= LocationFile.GetHashCode();
    if (LocationName.Length != 0) hash ^= LocationName.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LocationFile.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(LocationFile);
    }
    if (LocationName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(LocationName);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LocationFile.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationFile);
    }
    if (LocationName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationName);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LocationData other) {
    if (other == null) {
      return;
    }
    if (other.LocationFile.Length != 0) {
      LocationFile = other.LocationFile;
    }
    if (other.LocationName.Length != 0) {
      LocationName = other.LocationName;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          LocationFile = input.ReadString();
          break;
        }
        case 18: {
          LocationName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class RoomData : pb::IMessage<RoomData> {
  private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => new RoomData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData(RoomData other) : this() {
    hasDoor_ = other.hasDoor_;
    forceGoDoor_ = other.forceGoDoor_;
    roomName_ = other.roomName_;
    roomNum_ = other.roomNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData Clone() {
    return new RoomData(this);
  }

  /// <summary>Field number for the "hasDoor" field.</summary>
  public const int HasDoorFieldNumber = 2;
  private bool hasDoor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDoor {
    get { return hasDoor_; }
    set {
      hasDoor_ = value;
    }
  }

  /// <summary>Field number for the "forceGoDoor" field.</summary>
  public const int ForceGoDoorFieldNumber = 3;
  private bool forceGoDoor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ForceGoDoor {
    get { return forceGoDoor_; }
    set {
      forceGoDoor_ = value;
    }
  }

  /// <summary>Field number for the "roomName" field.</summary>
  public const int RoomNameFieldNumber = 5;
  private string roomName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomName {
    get { return roomName_; }
    set {
      roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomNum" field.</summary>
  public const int RoomNumFieldNumber = 4;
  private int roomNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomNum {
    get { return roomNum_; }
    set {
      roomNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HasDoor != other.HasDoor) return false;
    if (ForceGoDoor != other.ForceGoDoor) return false;
    if (RoomName != other.RoomName) return false;
    if (RoomNum != other.RoomNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDoor != false) hash ^= HasDoor.GetHashCode();
    if (ForceGoDoor != false) hash ^= ForceGoDoor.GetHashCode();
    if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
    if (RoomNum != 0) hash ^= RoomNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDoor != false) {
      output.WriteRawTag(16);
      output.WriteBool(HasDoor);
    }
    if (ForceGoDoor != false) {
      output.WriteRawTag(24);
      output.WriteBool(ForceGoDoor);
    }
    if (RoomNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoomNum);
    }
    if (RoomName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(RoomName);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDoor != false) {
      size += 1 + 1;
    }
    if (ForceGoDoor != false) {
      size += 1 + 1;
    }
    if (RoomName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
    }
    if (RoomNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomData other) {
    if (other == null) {
      return;
    }
    if (other.HasDoor != false) {
      HasDoor = other.HasDoor;
    }
    if (other.ForceGoDoor != false) {
      ForceGoDoor = other.ForceGoDoor;
    }
    if (other.RoomName.Length != 0) {
      RoomName = other.RoomName;
    }
    if (other.RoomNum != 0) {
      RoomNum = other.RoomNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 16: {
          HasDoor = input.ReadBool();
          break;
        }
        case 24: {
          ForceGoDoor = input.ReadBool();
          break;
        }
        case 32: {
          RoomNum = input.ReadInt32();
          break;
        }
        case 42: {
          RoomName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ToRemove : pb::IMessage<ToRemove> {
  private static readonly pb::MessageParser<ToRemove> _parser = new pb::MessageParser<ToRemove>(() => new ToRemove());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ToRemove> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToRemove() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToRemove(ToRemove other) : this() {
    iD_ = other.iD_;
    cID_ = other.cID_;
    owner_ = other.owner_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToRemove Clone() {
    return new ToRemove(this);
  }

  /// <summary>Field number for the "ID" field.</summary>
  public const int IDFieldNumber = 1;
  private uint iD_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ID {
    get { return iD_; }
    set {
      iD_ = value;
    }
  }

  /// <summary>Field number for the "CID" field.</summary>
  public const int CIDFieldNumber = 2;
  private int cID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CID {
    get { return cID_; }
    set {
      cID_ = value;
    }
  }

  /// <summary>Field number for the "Owner" field.</summary>
  public const int OwnerFieldNumber = 3;
  private uint owner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Owner {
    get { return owner_; }
    set {
      owner_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ToRemove);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ToRemove other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ID != other.ID) return false;
    if (CID != other.CID) return false;
    if (Owner != other.Owner) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ID != 0) hash ^= ID.GetHashCode();
    if (CID != 0) hash ^= CID.GetHashCode();
    if (Owner != 0) hash ^= Owner.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ID);
    }
    if (CID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CID);
    }
    if (Owner != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Owner);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
    }
    if (CID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CID);
    }
    if (Owner != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ToRemove other) {
    if (other == null) {
      return;
    }
    if (other.ID != 0) {
      ID = other.ID;
    }
    if (other.CID != 0) {
      CID = other.CID;
    }
    if (other.Owner != 0) {
      Owner = other.Owner;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ID = input.ReadUInt32();
          break;
        }
        case 16: {
          CID = input.ReadInt32();
          break;
        }
        case 24: {
          Owner = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LevelUpScene : pb::IMessage<LevelUpScene> {
  private static readonly pb::MessageParser<LevelUpScene> _parser = new pb::MessageParser<LevelUpScene>(() => new LevelUpScene());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LevelUpScene> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LevelUpScene() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LevelUpScene(LevelUpScene other) : this() {
    levelPicking_ = other.levelPicking_;
    perk1_ = other.perk1_;
    perk2_ = other.perk2_;
    perk3_ = other.perk3_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LevelUpScene Clone() {
    return new LevelUpScene(this);
  }

  /// <summary>Field number for the "levelPicking" field.</summary>
  public const int LevelPickingFieldNumber = 4;
  private uint levelPicking_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LevelPicking {
    get { return levelPicking_; }
    set {
      levelPicking_ = value;
    }
  }

  /// <summary>Field number for the "perk1" field.</summary>
  public const int Perk1FieldNumber = 1;
  private uint perk1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Perk1 {
    get { return perk1_; }
    set {
      perk1_ = value;
    }
  }

  /// <summary>Field number for the "perk2" field.</summary>
  public const int Perk2FieldNumber = 2;
  private uint perk2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Perk2 {
    get { return perk2_; }
    set {
      perk2_ = value;
    }
  }

  /// <summary>Field number for the "perk3" field.</summary>
  public const int Perk3FieldNumber = 3;
  private uint perk3_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Perk3 {
    get { return perk3_; }
    set {
      perk3_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LevelUpScene);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LevelUpScene other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LevelPicking != other.LevelPicking) return false;
    if (Perk1 != other.Perk1) return false;
    if (Perk2 != other.Perk2) return false;
    if (Perk3 != other.Perk3) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LevelPicking != 0) hash ^= LevelPicking.GetHashCode();
    if (Perk1 != 0) hash ^= Perk1.GetHashCode();
    if (Perk2 != 0) hash ^= Perk2.GetHashCode();
    if (Perk3 != 0) hash ^= Perk3.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Perk1 != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Perk1);
    }
    if (Perk2 != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Perk2);
    }
    if (Perk3 != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Perk3);
    }
    if (LevelPicking != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(LevelPicking);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LevelPicking != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelPicking);
    }
    if (Perk1 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Perk1);
    }
    if (Perk2 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Perk2);
    }
    if (Perk3 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Perk3);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LevelUpScene other) {
    if (other == null) {
      return;
    }
    if (other.LevelPicking != 0) {
      LevelPicking = other.LevelPicking;
    }
    if (other.Perk1 != 0) {
      Perk1 = other.Perk1;
    }
    if (other.Perk2 != 0) {
      Perk2 = other.Perk2;
    }
    if (other.Perk3 != 0) {
      Perk3 = other.Perk3;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Perk1 = input.ReadUInt32();
          break;
        }
        case 16: {
          Perk2 = input.ReadUInt32();
          break;
        }
        case 24: {
          Perk3 = input.ReadUInt32();
          break;
        }
        case 32: {
          LevelPicking = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Resources : pb::IMessage<Resources> {
  private static readonly pb::MessageParser<Resources> _parser = new pb::MessageParser<Resources>(() => new Resources());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Resources> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Resources() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Resources(Resources other) : this() {
    money_ = other.money_;
    moneyCurrent_ = other.moneyCurrent_;
    rareRes_ = other.rareRes_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Resources Clone() {
    return new Resources(this);
  }

  /// <summary>Field number for the "money" field.</summary>
  public const int MoneyFieldNumber = 1;
  private uint money_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Money {
    get { return money_; }
    set {
      money_ = value;
    }
  }

  /// <summary>Field number for the "moneyCurrent" field.</summary>
  public const int MoneyCurrentFieldNumber = 2;
  private uint moneyCurrent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MoneyCurrent {
    get { return moneyCurrent_; }
    set {
      moneyCurrent_ = value;
    }
  }

  /// <summary>Field number for the "rareRes" field.</summary>
  public const int RareResFieldNumber = 3;
  private uint rareRes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RareRes {
    get { return rareRes_; }
    set {
      rareRes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Resources);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Resources other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Money != other.Money) return false;
    if (MoneyCurrent != other.MoneyCurrent) return false;
    if (RareRes != other.RareRes) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Money != 0) hash ^= Money.GetHashCode();
    if (MoneyCurrent != 0) hash ^= MoneyCurrent.GetHashCode();
    if (RareRes != 0) hash ^= RareRes.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Money != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Money);
    }
    if (MoneyCurrent != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(MoneyCurrent);
    }
    if (RareRes != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(RareRes);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Money != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Money);
    }
    if (MoneyCurrent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyCurrent);
    }
    if (RareRes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RareRes);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Resources other) {
    if (other == null) {
      return;
    }
    if (other.Money != 0) {
      Money = other.Money;
    }
    if (other.MoneyCurrent != 0) {
      MoneyCurrent = other.MoneyCurrent;
    }
    if (other.RareRes != 0) {
      RareRes = other.RareRes;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Money = input.ReadUInt32();
          break;
        }
        case 16: {
          MoneyCurrent = input.ReadUInt32();
          break;
        }
        case 24: {
          RareRes = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AccountGeneral : pb::IMessage<AccountGeneral> {
  private static readonly pb::MessageParser<AccountGeneral> _parser = new pb::MessageParser<AccountGeneral>(() => new AccountGeneral());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccountGeneral> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountGeneral() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountGeneral(AccountGeneral other) : this() {
    Resources = other.resources_ != null ? other.Resources.Clone() : null;
    Stash = other.stash_ != null ? other.Stash.Clone() : null;
    Inventory = other.inventory_ != null ? other.Inventory.Clone() : null;
    Wearing = other.wearing_ != null ? other.Wearing.Clone() : null;
    lootOwnerID_ = other.lootOwnerID_;
    Loot = other.loot_ != null ? other.Loot.Clone() : null;
    Market = other.market_ != null ? other.Market.Clone() : null;
    achievements_ = other.achievements_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountGeneral Clone() {
    return new AccountGeneral(this);
  }

  /// <summary>Field number for the "resources" field.</summary>
  public const int ResourcesFieldNumber = 1;
  private global::Resources resources_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Resources Resources {
    get { return resources_; }
    set {
      resources_ = value;
    }
  }

  /// <summary>Field number for the "stash" field.</summary>
  public const int StashFieldNumber = 4;
  private global::Inv stash_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Inv Stash {
    get { return stash_; }
    set {
      stash_ = value;
    }
  }

  /// <summary>Field number for the "inventory" field.</summary>
  public const int InventoryFieldNumber = 5;
  private global::Inv inventory_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Inv Inventory {
    get { return inventory_; }
    set {
      inventory_ = value;
    }
  }

  /// <summary>Field number for the "wearing" field.</summary>
  public const int WearingFieldNumber = 6;
  private global::Inv wearing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Inv Wearing {
    get { return wearing_; }
    set {
      wearing_ = value;
    }
  }

  /// <summary>Field number for the "lootOwnerID" field.</summary>
  public const int LootOwnerIDFieldNumber = 10;
  private uint lootOwnerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LootOwnerID {
    get { return lootOwnerID_; }
    set {
      lootOwnerID_ = value;
    }
  }

  /// <summary>Field number for the "loot" field.</summary>
  public const int LootFieldNumber = 7;
  private global::Inv loot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Inv Loot {
    get { return loot_; }
    set {
      loot_ = value;
    }
  }

  /// <summary>Field number for the "market" field.</summary>
  public const int MarketFieldNumber = 9;
  private global::Inv market_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Inv Market {
    get { return market_; }
    set {
      market_ = value;
    }
  }

  /// <summary>Field number for the "achievements" field.</summary>
  public const int AchievementsFieldNumber = 8;
  private static readonly pb::FieldCodec<uint> _repeated_achievements_codec
      = pb::FieldCodec.ForUInt32(66);
  private readonly pbc::RepeatedField<uint> achievements_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Achievements {
    get { return achievements_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccountGeneral);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccountGeneral other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Resources, other.Resources)) return false;
    if (!object.Equals(Stash, other.Stash)) return false;
    if (!object.Equals(Inventory, other.Inventory)) return false;
    if (!object.Equals(Wearing, other.Wearing)) return false;
    if (LootOwnerID != other.LootOwnerID) return false;
    if (!object.Equals(Loot, other.Loot)) return false;
    if (!object.Equals(Market, other.Market)) return false;
    if(!achievements_.Equals(other.achievements_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (resources_ != null) hash ^= Resources.GetHashCode();
    if (stash_ != null) hash ^= Stash.GetHashCode();
    if (inventory_ != null) hash ^= Inventory.GetHashCode();
    if (wearing_ != null) hash ^= Wearing.GetHashCode();
    if (LootOwnerID != 0) hash ^= LootOwnerID.GetHashCode();
    if (loot_ != null) hash ^= Loot.GetHashCode();
    if (market_ != null) hash ^= Market.GetHashCode();
    hash ^= achievements_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (resources_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Resources);
    }
    if (stash_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Stash);
    }
    if (inventory_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Inventory);
    }
    if (wearing_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Wearing);
    }
    if (loot_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Loot);
    }
    achievements_.WriteTo(output, _repeated_achievements_codec);
    if (market_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(Market);
    }
    if (LootOwnerID != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(LootOwnerID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (resources_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
    }
    if (stash_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stash);
    }
    if (inventory_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inventory);
    }
    if (wearing_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wearing);
    }
    if (LootOwnerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LootOwnerID);
    }
    if (loot_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loot);
    }
    if (market_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Market);
    }
    size += achievements_.CalculateSize(_repeated_achievements_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccountGeneral other) {
    if (other == null) {
      return;
    }
    if (other.resources_ != null) {
      if (resources_ == null) {
        resources_ = new global::Resources();
      }
      Resources.MergeFrom(other.Resources);
    }
    if (other.stash_ != null) {
      if (stash_ == null) {
        stash_ = new global::Inv();
      }
      Stash.MergeFrom(other.Stash);
    }
    if (other.inventory_ != null) {
      if (inventory_ == null) {
        inventory_ = new global::Inv();
      }
      Inventory.MergeFrom(other.Inventory);
    }
    if (other.wearing_ != null) {
      if (wearing_ == null) {
        wearing_ = new global::Inv();
      }
      Wearing.MergeFrom(other.Wearing);
    }
    if (other.LootOwnerID != 0) {
      LootOwnerID = other.LootOwnerID;
    }
    if (other.loot_ != null) {
      if (loot_ == null) {
        loot_ = new global::Inv();
      }
      Loot.MergeFrom(other.Loot);
    }
    if (other.market_ != null) {
      if (market_ == null) {
        market_ = new global::Inv();
      }
      Market.MergeFrom(other.Market);
    }
    achievements_.Add(other.achievements_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (resources_ == null) {
            resources_ = new global::Resources();
          }
          input.ReadMessage(resources_);
          break;
        }
        case 34: {
          if (stash_ == null) {
            stash_ = new global::Inv();
          }
          input.ReadMessage(stash_);
          break;
        }
        case 42: {
          if (inventory_ == null) {
            inventory_ = new global::Inv();
          }
          input.ReadMessage(inventory_);
          break;
        }
        case 50: {
          if (wearing_ == null) {
            wearing_ = new global::Inv();
          }
          input.ReadMessage(wearing_);
          break;
        }
        case 58: {
          if (loot_ == null) {
            loot_ = new global::Inv();
          }
          input.ReadMessage(loot_);
          break;
        }
        case 66:
        case 64: {
          achievements_.AddEntriesFrom(input, _repeated_achievements_codec);
          break;
        }
        case 74: {
          if (market_ == null) {
            market_ = new global::Inv();
          }
          input.ReadMessage(market_);
          break;
        }
        case 80: {
          LootOwnerID = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ServerData : pb::IMessage<ServerData> {
  private static readonly pb::MessageParser<ServerData> _parser = new pb::MessageParser<ServerData>(() => new ServerData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerData(ServerData other) : this() {
    QueueData = other.queueData_ != null ? other.QueueData.Clone() : null;
    ConData = other.conData_ != null ? other.ConData.Clone() : null;
    AccountGeneral = other.accountGeneral_ != null ? other.AccountGeneral.Clone() : null;
    LevelUpScene = other.levelUpScene_ != null ? other.LevelUpScene.Clone() : null;
    SocialScene = other.socialScene_ != null ? other.SocialScene.Clone() : null;
    LocationData = other.locationData_ != null ? other.LocationData.Clone() : null;
    RoomData = other.roomData_ != null ? other.RoomData.Clone() : null;
    customObjects_ = other.customObjects_.Clone();
    enemies_ = other.enemies_.Clone();
    players_ = other.players_.Clone();
    toremove_ = other.toremove_.Clone();
    serverEffects_ = other.serverEffects_.Clone();
    actions_ = other.actions_.Clone();
    serverNotifications_ = other.serverNotifications_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerData Clone() {
    return new ServerData(this);
  }

  /// <summary>Field number for the "queueData" field.</summary>
  public const int QueueDataFieldNumber = 1;
  private global::QueueData queueData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QueueData QueueData {
    get { return queueData_; }
    set {
      queueData_ = value;
    }
  }

  /// <summary>Field number for the "conData" field.</summary>
  public const int ConDataFieldNumber = 2;
  private global::ConnectionData conData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConnectionData ConData {
    get { return conData_; }
    set {
      conData_ = value;
    }
  }

  /// <summary>Field number for the "accountGeneral" field.</summary>
  public const int AccountGeneralFieldNumber = 3;
  private global::AccountGeneral accountGeneral_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AccountGeneral AccountGeneral {
    get { return accountGeneral_; }
    set {
      accountGeneral_ = value;
    }
  }

  /// <summary>Field number for the "levelUpScene" field.</summary>
  public const int LevelUpSceneFieldNumber = 4;
  private global::LevelUpScene levelUpScene_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LevelUpScene LevelUpScene {
    get { return levelUpScene_; }
    set {
      levelUpScene_ = value;
    }
  }

  /// <summary>Field number for the "socialScene" field.</summary>
  public const int SocialSceneFieldNumber = 5;
  private global::SocialScene socialScene_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SocialScene SocialScene {
    get { return socialScene_; }
    set {
      socialScene_ = value;
    }
  }

  /// <summary>Field number for the "locationData" field.</summary>
  public const int LocationDataFieldNumber = 12;
  private global::LocationData locationData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocationData LocationData {
    get { return locationData_; }
    set {
      locationData_ = value;
    }
  }

  /// <summary>Field number for the "roomData" field.</summary>
  public const int RoomDataFieldNumber = 13;
  private global::RoomData roomData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomData RoomData {
    get { return roomData_; }
    set {
      roomData_ = value;
    }
  }

  /// <summary>Field number for the "customObjects" field.</summary>
  public const int CustomObjectsFieldNumber = 6;
  private static readonly pb::FieldCodec<global::CustomObject> _repeated_customObjects_codec
      = pb::FieldCodec.ForMessage(50, global::CustomObject.Parser);
  private readonly pbc::RepeatedField<global::CustomObject> customObjects_ = new pbc::RepeatedField<global::CustomObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CustomObject> CustomObjects {
    get { return customObjects_; }
  }

  /// <summary>Field number for the "enemies" field.</summary>
  public const int EnemiesFieldNumber = 7;
  private static readonly pb::FieldCodec<global::EnemyObject> _repeated_enemies_codec
      = pb::FieldCodec.ForMessage(58, global::EnemyObject.Parser);
  private readonly pbc::RepeatedField<global::EnemyObject> enemies_ = new pbc::RepeatedField<global::EnemyObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EnemyObject> Enemies {
    get { return enemies_; }
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 8;
  private static readonly pb::FieldCodec<global::PlayerObject> _repeated_players_codec
      = pb::FieldCodec.ForMessage(66, global::PlayerObject.Parser);
  private readonly pbc::RepeatedField<global::PlayerObject> players_ = new pbc::RepeatedField<global::PlayerObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerObject> Players {
    get { return players_; }
  }

  /// <summary>Field number for the "toremove" field.</summary>
  public const int ToremoveFieldNumber = 9;
  private static readonly pb::FieldCodec<global::ToRemove> _repeated_toremove_codec
      = pb::FieldCodec.ForMessage(74, global::ToRemove.Parser);
  private readonly pbc::RepeatedField<global::ToRemove> toremove_ = new pbc::RepeatedField<global::ToRemove>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ToRemove> Toremove {
    get { return toremove_; }
  }

  /// <summary>Field number for the "serverEffects" field.</summary>
  public const int ServerEffectsFieldNumber = 10;
  private static readonly pb::FieldCodec<global::ServerEffect> _repeated_serverEffects_codec
      = pb::FieldCodec.ForMessage(82, global::ServerEffect.Parser);
  private readonly pbc::RepeatedField<global::ServerEffect> serverEffects_ = new pbc::RepeatedField<global::ServerEffect>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ServerEffect> ServerEffects {
    get { return serverEffects_; }
  }

  /// <summary>Field number for the "actions" field.</summary>
  public const int ActionsFieldNumber = 11;
  private static readonly pb::FieldCodec<global::TurnAction> _repeated_actions_codec
      = pb::FieldCodec.ForMessage(90, global::TurnAction.Parser);
  private readonly pbc::RepeatedField<global::TurnAction> actions_ = new pbc::RepeatedField<global::TurnAction>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TurnAction> Actions {
    get { return actions_; }
  }

  /// <summary>Field number for the "serverNotifications" field.</summary>
  public const int ServerNotificationsFieldNumber = 14;
  private static readonly pb::FieldCodec<global::ServerNotification> _repeated_serverNotifications_codec
      = pb::FieldCodec.ForMessage(114, global::ServerNotification.Parser);
  private readonly pbc::RepeatedField<global::ServerNotification> serverNotifications_ = new pbc::RepeatedField<global::ServerNotification>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ServerNotification> ServerNotifications {
    get { return serverNotifications_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(QueueData, other.QueueData)) return false;
    if (!object.Equals(ConData, other.ConData)) return false;
    if (!object.Equals(AccountGeneral, other.AccountGeneral)) return false;
    if (!object.Equals(LevelUpScene, other.LevelUpScene)) return false;
    if (!object.Equals(SocialScene, other.SocialScene)) return false;
    if (!object.Equals(LocationData, other.LocationData)) return false;
    if (!object.Equals(RoomData, other.RoomData)) return false;
    if(!customObjects_.Equals(other.customObjects_)) return false;
    if(!enemies_.Equals(other.enemies_)) return false;
    if(!players_.Equals(other.players_)) return false;
    if(!toremove_.Equals(other.toremove_)) return false;
    if(!serverEffects_.Equals(other.serverEffects_)) return false;
    if(!actions_.Equals(other.actions_)) return false;
    if(!serverNotifications_.Equals(other.serverNotifications_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (queueData_ != null) hash ^= QueueData.GetHashCode();
    if (conData_ != null) hash ^= ConData.GetHashCode();
    if (accountGeneral_ != null) hash ^= AccountGeneral.GetHashCode();
    if (levelUpScene_ != null) hash ^= LevelUpScene.GetHashCode();
    if (socialScene_ != null) hash ^= SocialScene.GetHashCode();
    if (locationData_ != null) hash ^= LocationData.GetHashCode();
    if (roomData_ != null) hash ^= RoomData.GetHashCode();
    hash ^= customObjects_.GetHashCode();
    hash ^= enemies_.GetHashCode();
    hash ^= players_.GetHashCode();
    hash ^= toremove_.GetHashCode();
    hash ^= serverEffects_.GetHashCode();
    hash ^= actions_.GetHashCode();
    hash ^= serverNotifications_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (queueData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QueueData);
    }
    if (conData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConData);
    }
    if (accountGeneral_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(AccountGeneral);
    }
    if (levelUpScene_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LevelUpScene);
    }
    if (socialScene_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(SocialScene);
    }
    customObjects_.WriteTo(output, _repeated_customObjects_codec);
    enemies_.WriteTo(output, _repeated_enemies_codec);
    players_.WriteTo(output, _repeated_players_codec);
    toremove_.WriteTo(output, _repeated_toremove_codec);
    serverEffects_.WriteTo(output, _repeated_serverEffects_codec);
    actions_.WriteTo(output, _repeated_actions_codec);
    if (locationData_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(LocationData);
    }
    if (roomData_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(RoomData);
    }
    serverNotifications_.WriteTo(output, _repeated_serverNotifications_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (queueData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueueData);
    }
    if (conData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConData);
    }
    if (accountGeneral_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountGeneral);
    }
    if (levelUpScene_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelUpScene);
    }
    if (socialScene_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocialScene);
    }
    if (locationData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocationData);
    }
    if (roomData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomData);
    }
    size += customObjects_.CalculateSize(_repeated_customObjects_codec);
    size += enemies_.CalculateSize(_repeated_enemies_codec);
    size += players_.CalculateSize(_repeated_players_codec);
    size += toremove_.CalculateSize(_repeated_toremove_codec);
    size += serverEffects_.CalculateSize(_repeated_serverEffects_codec);
    size += actions_.CalculateSize(_repeated_actions_codec);
    size += serverNotifications_.CalculateSize(_repeated_serverNotifications_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerData other) {
    if (other == null) {
      return;
    }
    if (other.queueData_ != null) {
      if (queueData_ == null) {
        queueData_ = new global::QueueData();
      }
      QueueData.MergeFrom(other.QueueData);
    }
    if (other.conData_ != null) {
      if (conData_ == null) {
        conData_ = new global::ConnectionData();
      }
      ConData.MergeFrom(other.ConData);
    }
    if (other.accountGeneral_ != null) {
      if (accountGeneral_ == null) {
        accountGeneral_ = new global::AccountGeneral();
      }
      AccountGeneral.MergeFrom(other.AccountGeneral);
    }
    if (other.levelUpScene_ != null) {
      if (levelUpScene_ == null) {
        levelUpScene_ = new global::LevelUpScene();
      }
      LevelUpScene.MergeFrom(other.LevelUpScene);
    }
    if (other.socialScene_ != null) {
      if (socialScene_ == null) {
        socialScene_ = new global::SocialScene();
      }
      SocialScene.MergeFrom(other.SocialScene);
    }
    if (other.locationData_ != null) {
      if (locationData_ == null) {
        locationData_ = new global::LocationData();
      }
      LocationData.MergeFrom(other.LocationData);
    }
    if (other.roomData_ != null) {
      if (roomData_ == null) {
        roomData_ = new global::RoomData();
      }
      RoomData.MergeFrom(other.RoomData);
    }
    customObjects_.Add(other.customObjects_);
    enemies_.Add(other.enemies_);
    players_.Add(other.players_);
    toremove_.Add(other.toremove_);
    serverEffects_.Add(other.serverEffects_);
    actions_.Add(other.actions_);
    serverNotifications_.Add(other.serverNotifications_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (queueData_ == null) {
            queueData_ = new global::QueueData();
          }
          input.ReadMessage(queueData_);
          break;
        }
        case 18: {
          if (conData_ == null) {
            conData_ = new global::ConnectionData();
          }
          input.ReadMessage(conData_);
          break;
        }
        case 26: {
          if (accountGeneral_ == null) {
            accountGeneral_ = new global::AccountGeneral();
          }
          input.ReadMessage(accountGeneral_);
          break;
        }
        case 34: {
          if (levelUpScene_ == null) {
            levelUpScene_ = new global::LevelUpScene();
          }
          input.ReadMessage(levelUpScene_);
          break;
        }
        case 42: {
          if (socialScene_ == null) {
            socialScene_ = new global::SocialScene();
          }
          input.ReadMessage(socialScene_);
          break;
        }
        case 50: {
          customObjects_.AddEntriesFrom(input, _repeated_customObjects_codec);
          break;
        }
        case 58: {
          enemies_.AddEntriesFrom(input, _repeated_enemies_codec);
          break;
        }
        case 66: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
        case 74: {
          toremove_.AddEntriesFrom(input, _repeated_toremove_codec);
          break;
        }
        case 82: {
          serverEffects_.AddEntriesFrom(input, _repeated_serverEffects_codec);
          break;
        }
        case 90: {
          actions_.AddEntriesFrom(input, _repeated_actions_codec);
          break;
        }
        case 98: {
          if (locationData_ == null) {
            locationData_ = new global::LocationData();
          }
          input.ReadMessage(locationData_);
          break;
        }
        case 106: {
          if (roomData_ == null) {
            roomData_ = new global::RoomData();
          }
          input.ReadMessage(roomData_);
          break;
        }
        case 114: {
          serverNotifications_.AddEntriesFrom(input, _repeated_serverNotifications_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ServerNotification : pb::IMessage<ServerNotification> {
  private static readonly pb::MessageParser<ServerNotification> _parser = new pb::MessageParser<ServerNotification>(() => new ServerNotification());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerNotification(ServerNotification other) : this() {
    text_ = other.text_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerNotification Clone() {
    return new ServerNotification(this);
  }

  /// <summary>Field number for the "text" field.</summary>
  public const int TextFieldNumber = 1;
  private string text_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Text {
    get { return text_; }
    set {
      text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private uint type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Text != other.Text) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Text.Length != 0) hash ^= Text.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Text.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Text);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Text.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerNotification other) {
    if (other == null) {
      return;
    }
    if (other.Text.Length != 0) {
      Text = other.Text;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Text = input.ReadString();
          break;
        }
        case 16: {
          Type = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TurnAction : pb::IMessage<TurnAction> {
  private static readonly pb::MessageParser<TurnAction> _parser = new pb::MessageParser<TurnAction>(() => new TurnAction());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TurnAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TurnAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TurnAction(TurnAction other) : this() {
    placeStart_ = other.placeStart_;
    agent_ = other.agent_;
    skillID_ = other.skillID_;
    itemPlace_ = other.itemPlace_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TurnAction Clone() {
    return new TurnAction(this);
  }

  /// <summary>Field number for the "PlaceStart" field.</summary>
  public const int PlaceStartFieldNumber = 1;
  private int placeStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlaceStart {
    get { return placeStart_; }
    set {
      placeStart_ = value;
    }
  }

  /// <summary>Field number for the "Agent" field.</summary>
  public const int AgentFieldNumber = 2;
  private uint agent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Agent {
    get { return agent_; }
    set {
      agent_ = value;
    }
  }

  /// <summary>Field number for the "SkillID" field.</summary>
  public const int SkillIDFieldNumber = 3;
  private uint skillID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SkillID {
    get { return skillID_; }
    set {
      skillID_ = value;
    }
  }

  /// <summary>Field number for the "ItemPlace" field.</summary>
  public const int ItemPlaceFieldNumber = 4;
  private int itemPlace_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemPlace {
    get { return itemPlace_; }
    set {
      itemPlace_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TurnAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TurnAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlaceStart != other.PlaceStart) return false;
    if (Agent != other.Agent) return false;
    if (SkillID != other.SkillID) return false;
    if (ItemPlace != other.ItemPlace) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlaceStart != 0) hash ^= PlaceStart.GetHashCode();
    if (Agent != 0) hash ^= Agent.GetHashCode();
    if (SkillID != 0) hash ^= SkillID.GetHashCode();
    if (ItemPlace != 0) hash ^= ItemPlace.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlaceStart != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlaceStart);
    }
    if (Agent != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Agent);
    }
    if (SkillID != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(SkillID);
    }
    if (ItemPlace != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ItemPlace);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlaceStart != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaceStart);
    }
    if (Agent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Agent);
    }
    if (SkillID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillID);
    }
    if (ItemPlace != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemPlace);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TurnAction other) {
    if (other == null) {
      return;
    }
    if (other.PlaceStart != 0) {
      PlaceStart = other.PlaceStart;
    }
    if (other.Agent != 0) {
      Agent = other.Agent;
    }
    if (other.SkillID != 0) {
      SkillID = other.SkillID;
    }
    if (other.ItemPlace != 0) {
      ItemPlace = other.ItemPlace;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PlaceStart = input.ReadInt32();
          break;
        }
        case 16: {
          Agent = input.ReadUInt32();
          break;
        }
        case 24: {
          SkillID = input.ReadUInt32();
          break;
        }
        case 32: {
          ItemPlace = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Command : pb::IMessage<Command> {
  private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Command> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Command() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Command(Command other) : this() {
    commandId_ = other.commandId_;
    params_ = other.params_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Command Clone() {
    return new Command(this);
  }

  /// <summary>Field number for the "CommandId" field.</summary>
  public const int CommandIdFieldNumber = 1;
  private int commandId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CommandId {
    get { return commandId_; }
    set {
      commandId_ = value;
    }
  }

  /// <summary>Field number for the "Params" field.</summary>
  public const int ParamsFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_params_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Params {
    get { return params_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Command);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Command other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CommandId != other.CommandId) return false;
    if(!params_.Equals(other.params_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CommandId != 0) hash ^= CommandId.GetHashCode();
    hash ^= params_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CommandId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CommandId);
    }
    params_.WriteTo(output, _repeated_params_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CommandId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommandId);
    }
    size += params_.CalculateSize(_repeated_params_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Command other) {
    if (other == null) {
      return;
    }
    if (other.CommandId != 0) {
      CommandId = other.CommandId;
    }
    params_.Add(other.params_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CommandId = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          params_.AddEntriesFrom(input, _repeated_params_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ClientData : pb::IMessage<ClientData> {
  private static readonly pb::MessageParser<ClientData> _parser = new pb::MessageParser<ClientData>(() => new ClientData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData(ClientData other) : this() {
    roomId_ = other.roomId_;
    commands_ = other.commands_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData Clone() {
    return new ClientData(this);
  }

  /// <summary>Field number for the "roomId" field.</summary>
  public const int RoomIdFieldNumber = 2;
  private int roomId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomId {
    get { return roomId_; }
    set {
      roomId_ = value;
    }
  }

  /// <summary>Field number for the "commands" field.</summary>
  public const int CommandsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Command> _repeated_commands_codec
      = pb::FieldCodec.ForMessage(26, global::Command.Parser);
  private readonly pbc::RepeatedField<global::Command> commands_ = new pbc::RepeatedField<global::Command>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Command> Commands {
    get { return commands_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomId != other.RoomId) return false;
    if(!commands_.Equals(other.commands_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomId != 0) hash ^= RoomId.GetHashCode();
    hash ^= commands_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomId);
    }
    commands_.WriteTo(output, _repeated_commands_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
    }
    size += commands_.CalculateSize(_repeated_commands_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientData other) {
    if (other == null) {
      return;
    }
    if (other.RoomId != 0) {
      RoomId = other.RoomId;
    }
    commands_.Add(other.commands_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 16: {
          RoomId = input.ReadInt32();
          break;
        }
        case 26: {
          commands_.AddEntriesFrom(input, _repeated_commands_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
